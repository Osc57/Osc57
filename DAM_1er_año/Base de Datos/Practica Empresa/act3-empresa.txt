1.
================================================================
A)
DELIMITER //
CREATE PROCEDURE insercionEmpleado(IN dni CHAR(9), IN nom VARCHAR(20), IN ape VARCHAR(20), IN f_nac DATE, IN telef VARCHAR(20), IN depart INT)
BEGIN
	INSERT INTO empleados (dni,nombre,apellidos,fecha_nacimiento,telefono,departamento) VALUES (dni,nom,ape,f_nac,telef,depart);
END//
DELIMITER ;
CALL insercionEmpleado();
================================================================
B)
DELIMITER //
CREATE PROCEDURE subidaDeSalario(IN depart INT, IN porcentaje INT)
BEGIN
	SELECT departamento,salario+((salario*porcentaje)/100)  AS salario FROM empleados WHERE departamento=depart;
END//
DELIMITER ;
CALL subidaDeSalario();
================================================================
C)
DELIMITER //
CREATE PROCEDURE asignacionTarea(IN tarea VARCHAR(20),IN emple VARCHAR(9))
BEGIN
	INSERT INTO tareas(nombre,empleado) VALUES (tarea,emple);
END//
DELIMITER ;
CALL asignacionTarea();
================================================================
D)
DELIMITER //
CREATE PROCEDURE migracionDepartamento(IN persona CHAR(9), IN d_destino INT)
BEGIN
	UPDATE empleados SET departamento=d_destino WHERE DNI=persona;
END//
DELIMITER ;
CALL migracionDepartamento();
================================================================

2.
================================================================
A)
DELIMITER //
CREATE FUNCTION mayor_edad() RETURNS VARCHAR(20)
BEGIN
SET @mayor=(SELECT nombre FROM empleados WHERE fecha_nacimiento=(SELECT MIN(fecha_nacimiento) FROM empleados));
RETURN @mayor;
END//
DELIMITER ;

SELECT mayor_edad();
================================================================
B)
DELIMITER //
CREATE FUNCTION mayor_salario() RETURNS VARCHAR(20)
BEGIN
SET @m_salario=(SELECT nombre FROM empleados WHERE salario=(SELECT MAX(salario) FROM empleados));
RETURN @m_salario;
END//
DELIMITER ;

SELECT mayor_salario();
================================================================
C)
DELIMITER //
CREATE FUNCTION depart_num() RETURNS VARCHAR(20)
BEGIN
SET @n_emple=(SELECT COUNT(DNI) AS emple FROM empleados GROUP BY departamento ORDER BY emple DESC LIMIT 1);
SET @dep_num=(SELECT departamento FROM empleados GROUP BY departamento HAVING COUNT(DNI)=@n_emple LIMIT 1);
RETURN @dep_num;
END//
DELIMITER ;

SELECT depart_num();
================================================================
D)
DELIMITER //
CREATE FUNCTION tarea_urgent() RETURNS VARCHAR(20)
BEGIN
SET @t_urgent=(SELECT nombre FROM tareas WHERE fecha_fin=(SELECT MIN(fecha_fin) FROM tareas));
RETURN @t_urgent;
END//
DELIMITER ;

SELECT tarea_urgent();
================================================================

3.
================================================================
A)
DELIMITER //
CREATE TRIGGER asigna_fecha
BEFORE INSERT ON tareas FOR EACH ROW
BEGIN

SET @product=(SELECT productividad FROM empleados WHERE empleados.dni=NEW.empleado);

IF @product=1 THEN
	SET NEW.fecha_fin=DATE_ADD(NEW.fecha_inicio, INTERVAL 30 DAY);
END IF;
IF @product=2 THEN
	SET NEW.fecha_fin=DATE_ADD(NEW.fecha_inicio, INTERVAL 15 DAY);
END IF;
IF @product=3 THEN
	SET NEW.fecha_fin=DATE_ADD(NEW.fecha_inicio, INTERVAL 7 DAY);
END IF;
END//
DELIMITER ;

INSERT INTO tareas (nombre,fecha_inicio,empleado) VALUES ('Tarea 56','2024-04-16','B');
================================================================
B)
DELIMITER //
CREATE TRIGGER cambiar_depart
BEFORE UPDATE ON empleados FOR EACH ROW
BEGIN
	SET @personaProductiva= (SELECT dni FROM empleados WHERE departamento=OLD.departamento AND productividad=(SELECT MAX(productividad) FROM empleados WHERE departamento=OLD.departamento));
        UPDATE tareas SET empleado=@personaProductiva WHERE empleado=OLD.dni;
END//
DELIMITER ;
================================================================
















